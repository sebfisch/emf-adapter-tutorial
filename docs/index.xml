<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Using EMF adapters on EMF Adapter Tutorial</title>
    <link>http://sebfisch.github.io/emf-adapter-tutorial/</link>
    <description>Recent content in Using EMF adapters on EMF Adapter Tutorial</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://sebfisch.github.io/emf-adapter-tutorial/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Game-State Model</title>
      <link>http://sebfisch.github.io/emf-adapter-tutorial/docs/static_methods/game_state_model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sebfisch.github.io/emf-adapter-tutorial/docs/static_methods/game_state_model/</guid>
      <description>Using EMF to model the game state This tutorial expects that you are familiar with modelling in EMF. If you are not, you might want to look at the EMF Tutorial first.
Our model for the game state defines an enumeration type for players and classes for the board, fields and their marks.
Fields are contained in boards and marks are optional and contained in fields. We also specify backwards (or upwards) so called container references for contained classes.</description>
    </item>
    
    <item>
      <title>Static Constructors</title>
      <link>http://sebfisch.github.io/emf-adapter-tutorial/docs/static_methods/static_constructors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sebfisch.github.io/emf-adapter-tutorial/docs/static_methods/static_constructors/</guid>
      <description>Static methods constructing required instances Let&amp;rsquo;s take a look at the main class used to start the game app.
// app.TicTacToe public class TicTacToe { public static void main(final String[] args) { SwingUtilities.invokeLater(() -&amp;gt; new TicTacToe().show()); } private static final String WINDOW_TITLE = &amp;#34;Tic Tac Toe&amp;#34;; private final Board board; private final JFrame window; public TicTacToe() { board = GameConstructors.emptyBoard(); window = UiConstructors.emptyWindow(WINDOW_TITLE); window.getContentPane().add(BoardHelpers.getComponent(board)); } public void show() { window.pack(); window.</description>
    </item>
    
    <item>
      <title>Static Helpers</title>
      <link>http://sebfisch.github.io/emf-adapter-tutorial/docs/static_methods/static_helpers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sebfisch.github.io/emf-adapter-tutorial/docs/static_methods/static_helpers/</guid>
      <description>Static methods with additional functionality There many opions for how to implement additional functionality for the types in our game-state model. We could
 modify the source code generated by EMF, use inheritance to extend the generated interfaces, define static methods operating on model types, or use delegation to operate on wrapped model instances.  This tutorial is about learning to do option 4 with EMF adapters. However, the first version of the Tic-Tac-Toe app does not yet use adapters.</description>
    </item>
    
    <item>
      <title>Model Access</title>
      <link>http://sebfisch.github.io/emf-adapter-tutorial/docs/plain_adapters/model_access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sebfisch.github.io/emf-adapter-tutorial/docs/plain_adapters/model_access/</guid>
      <description>Access adapters When reviewing the FieldHelpers class we observed that it contains methods related to user interface components as well as methods related to querying and modifying game-model data. For access to the game model we will implement adapters in the game.adapters.access package. For now, it only contains an adapter for Field instances because the app did not have any board helpers unrelated to user interfaces.
We implement the field access adapter in a class FieldAccess that wraps a Field instance.</description>
    </item>
    
    <item>
      <title>User Interface</title>
      <link>http://sebfisch.github.io/emf-adapter-tutorial/docs/plain_adapters/user_interface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sebfisch.github.io/emf-adapter-tutorial/docs/plain_adapters/user_interface/</guid>
      <description>User interface adapters We now turn the static helper methods for boards and fields that have been used to manage corresponding user interface components into adapters in the game.adapters.ui package.
Field UI Apart from the wrapped Field instance the FieldUi adapter stores a button that can be clicked to mark the represented field.
// game.adapters.ui.FieldUi public class FieldUi implements Adapter { private static final int LABEL_SIZE = 90; private static final Dimension FIELD_DIMENSIONS = new Dimension(100, 100); private Field field; private final JButton button; FieldUi() { button = new JButton(&amp;#34;&amp;#34;); button.</description>
    </item>
    
    <item>
      <title>Adapter Factories</title>
      <link>http://sebfisch.github.io/emf-adapter-tutorial/docs/plain_adapters/adapter_factories/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sebfisch.github.io/emf-adapter-tutorial/docs/plain_adapters/adapter_factories/</guid>
      <description>Creating and attaching adapters To wrap up the second step in the tutorial, we now discuss how adapter factories can be used to create adapters and associate them with model instances. We could just create adapter instances and add them to the list returned by the eAdapters method of model instances. This would lead to setTarget being called on the adapter to complete the association.
Instead we will hide the creation of adapters in subclasses of the class GameAdapterFactory generated automatically with our model code.</description>
    </item>
    
    <item>
      <title>Typed Adapters</title>
      <link>http://sebfisch.github.io/emf-adapter-tutorial/docs/programming_tasks/typed_adapters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sebfisch.github.io/emf-adapter-tutorial/docs/programming_tasks/typed_adapters/</guid>
      <description>Step 4: Refactoring the adapters In order to work on this task, check out the code for the third step from the git repository or download the corresponding zip file.
git checkout -b step3 step3-object-adapter-v1  This step contains the base class ObjectAdapter discussed previously.
Refactor the classes FieldAccess, FieldUi and BoardUi to extend the ObjectAdapter class instead of implementing the Adapter interface directly.
 Adjust the constructors of all adapters to call the superclass constructor with the correct class.</description>
    </item>
    
    <item>
      <title>Winning Check</title>
      <link>http://sebfisch.github.io/emf-adapter-tutorial/docs/programming_tasks/winning_check/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sebfisch.github.io/emf-adapter-tutorial/docs/programming_tasks/winning_check/</guid>
      <description>Step 5: Implementing the winning condition In order to work on this task, check out the code for the fourth step from the git repository or download the corresponding zip file.
git checkout -b step4 step4-typed-adapters-v1  This step contains the solution for the previous task.
If you looked closely, you might have noticed that the animation of the app shown in the beginning was different from the version implemented so far.</description>
    </item>
    
    <item>
      <title>Escape Restart</title>
      <link>http://sebfisch.github.io/emf-adapter-tutorial/docs/programming_tasks/escape_restart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sebfisch.github.io/emf-adapter-tutorial/docs/programming_tasks/escape_restart/</guid>
      <description>Step 6: Implementing restart functionality In order to work on this task, check out the code for the fifth step from the git repository or download the corresponding zip file.
git checkout -b step5 step5-winning-check-v2  This step contains the solutions for the previous tasks.
To avoid having to reopen the app after every game, it would be useful to be able to restart games. Implement the possibility to restart games by pressing the escape key.</description>
    </item>
    
    <item>
      <title>Functional Interfaces</title>
      <link>http://sebfisch.github.io/emf-adapter-tutorial/docs/background/functional_interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sebfisch.github.io/emf-adapter-tutorial/docs/background/functional_interfaces/</guid>
      <description>Functional interfaces and lambda expressions Functional interfaces are interfaces with exactly one method (and possibly additional default methods.) We have seen that Runnable is a functional interface. It contains exactly one method run without arguments that does not return a result:
interface Runnable { void run(); } We used a lambda expression to create an instance of this interface in the static main method of the TicTacToe class:
SwingUtilities.invokeLater(() -&amp;gt; new TicTacToe().</description>
    </item>
    
    <item>
      <title>Type Parameters</title>
      <link>http://sebfisch.github.io/emf-adapter-tutorial/docs/background/type_parameters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sebfisch.github.io/emf-adapter-tutorial/docs/background/type_parameters/</guid>
      <description>Type safe generic programming We can use type parameters to implement functionality for different types without sacrificing type safety. Let&amp;rsquo;s revisit the functional interface Consumer.
interface Consumer&amp;lt;T&amp;gt; { void accept(T t); } We saw it in the background section on consumers where we discussed the following application of the forEach method.
board.getFields().forEach(field -&amp;gt; { FieldHelpers.addUnmarkedFieldComponent(field, panel); }); The accept method can take arguments of arbitrary (object-) types. The argument type is reflected in the type parameter T which is also mentioned with the name of the interface.</description>
    </item>
    
    <item>
      <title>Stream Programming</title>
      <link>http://sebfisch.github.io/emf-adapter-tutorial/docs/background/stream_programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sebfisch.github.io/emf-adapter-tutorial/docs/background/stream_programming/</guid>
      <description>Programming with streams The Stream type is a parameterized type representing multiple elements. It provides methods to transform or filter contained elements which can be used to search elements with certain properties. The adapters we wrote have a static method from that can be used to search for adapters of their own type. Let&amp;rsquo;s revisit one ofe them.
public static FieldAccess from(final Field field) { return field.eAdapters().stream() // 	.filter(FieldAccess.class::isInstance) // 	.</description>
    </item>
    
  </channel>
</rss>