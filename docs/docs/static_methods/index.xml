<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tic-Tac-Toe App on EMF Adapter Tutorial</title>
    <link>http://sebfisch.github.io/emf-adapter-tutorial/docs/static_methods/</link>
    <description>Recent content in Tic-Tac-Toe App on EMF Adapter Tutorial</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://sebfisch.github.io/emf-adapter-tutorial/docs/static_methods/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Game-State Model</title>
      <link>http://sebfisch.github.io/emf-adapter-tutorial/docs/static_methods/game_state_model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sebfisch.github.io/emf-adapter-tutorial/docs/static_methods/game_state_model/</guid>
      <description>Using EMF to model the game state This tutorial expects that you are familiar with modelling in EMF. If you are not, you might want to look at the EMF Tutorial first.
Our model for the game state defines an enumeration type for players and classes for the board, fields and their marks.
Fields are contained in boards and marks are optional and contained in fields. We also specify backwards (or upwards) so called container references for contained classes.</description>
    </item>
    
    <item>
      <title>Static Constructors</title>
      <link>http://sebfisch.github.io/emf-adapter-tutorial/docs/static_methods/static_constructors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sebfisch.github.io/emf-adapter-tutorial/docs/static_methods/static_constructors/</guid>
      <description>Static methods constructing required instances Let&amp;rsquo;s take a look at the main class used to start the game app.
// app.TicTacToe public class TicTacToe { public static void main(final String[] args) { SwingUtilities.invokeLater(() -&amp;gt; new TicTacToe().show()); } private static final String WINDOW_TITLE = &amp;#34;Tic Tac Toe&amp;#34;; private final Board board; private final JFrame window; public TicTacToe() { board = GameConstructors.emptyBoard(); window = UiConstructors.emptyWindow(WINDOW_TITLE); window.getContentPane().add(BoardHelpers.getComponent(board)); } public void show() { window.pack(); window.</description>
    </item>
    
    <item>
      <title>Static Helpers</title>
      <link>http://sebfisch.github.io/emf-adapter-tutorial/docs/static_methods/static_helpers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sebfisch.github.io/emf-adapter-tutorial/docs/static_methods/static_helpers/</guid>
      <description>Static methods with additional functionality There many opions for how to implement additional functionality for the types in our game-state model. We could
 modify the source code generated by EMF, use inheritance to extend the generated interfaces, define static methods operating on model types, or use delegation to operate on wrapped model instances.  This tutorial is about learning to do option 4 with EMF adapters. However, the first version of the Tic-Tac-Toe app does not yet use adapters.</description>
    </item>
    
  </channel>
</rss>